<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int N = 4;    //total number of processes in the system
typedef int[0,N-1]id_t;    //typedef used for each process

const int K = 2;    //miimum time spent in the critical section by each process

int req_mat[N][N];    //matrix to maintain the exchange of `REQUEST` messages among the processes
int reply_mat[N][N];    //matrix to maintain the exchange of `REPLY` messages among the processes
int release_mat[N][N];    //matrix to maintain the exchange of `RELEASE` messages among the processes

int queue_mat[N][N];    //queue for handling the transfer of message requests among processes
int start_index[N];    //array to maintain the start index of the queue of each process
int end_index[N];    //array to maintain the end index of the queue of each process 

int reply_after_release[N];    //array to maintain the status `WHETHER_A_REPLY_MSG_HAS_BEEN_SENT_AFTER_THE_LAST_RELEASE_MESSAGE`

//function to initialize a process -&gt; invoked while going from state `initial_state` to `before_sending_req`
void init_func(id_t process_id)
{
    start_index[process_id] = 0;
    end_index[process_id] = 0;
    reply_after_release[process_id] = 0;

    return;
}

//function to initiate the requesting procedure when a function intends to enter the critical section
void generate_req(id_t process_id)
{
    for (i: int[1, (N/2) + 1])
    {
        req_mat[process_id][(i+process_id)%N] = 1;
    }    

    return;
}

//function to check if there are any pending `REQUEST` messages to be handled
int there_are_pending_req_msgs(id_t process_id)
{
    for (i: int[0, N-1])
    {
        if(req_mat[i][process_id] == 1)
        {
            return 1;
        }
    }
    return 0;
}

//function to handle incoming `REQUEST` messages
void check_req_msgs(id_t process_id)
{
    for (i: int[0, N-1])
    {
        if(req_mat[i][process_id] == 1)
        {
            if(reply_after_release[process_id] == 0)
            {
                reply_mat[process_id][i] = 1;
                reply_after_release[process_id] = 1;
            }
            else if(reply_after_release[process_id] == 1)
            {
                queue_mat[process_id][end_index[process_id]] = i;         //enqueue (at the end of the queue)
                end_index[process_id] = (end_index[process_id] + 1)%N;
            }
            req_mat[i][process_id] = 0;        //"consume" the message
        }             
    }    

    return;
}

//function to check if there are any pending `RELEASE` messages to be handled
int there_are_pending_release_msgs(id_t process_id)
{
    for (i: int[0, N-1])
    {
        if(release_mat[i][process_id] == 1)
        {
            return 1;
        }
    }
    return 0;
}

//function to handle incoming `RELEASE` messages
void check_release_msgs(id_t process_id)
{
    for (i: int[0, N-1])
    {
        if(release_mat[i][process_id] == 1)        //receiving a release message from i_th process
        {
            if(start_index[process_id] == end_index[process_id])    //empty queue
            {
                reply_after_release[process_id] = 0;
                release_mat[i][process_id] = 0;
                return ;                
            }
            else
            {
                //dequeue top element
                start_index[process_id] = (start_index[process_id] + 1)%N;

                if(start_index[process_id] == end_index[process_id])    //empty queue
                {
                    reply_after_release[process_id] = 0;
                    release_mat[i][process_id] = 0;
                    return ;                
                }

                reply_mat[process_id][queue_mat[process_id][start_index[process_id]]] = 1;    //send `reply` message
                reply_after_release[process_id] = 1;
            }
            release_mat[i][process_id] = 0;
        }
    }

    return;    
}

//function to check if a process should enter the critical section
int check_enter_cs(id_t process_id)
{
    for (i: int[1, (N/2) + 1])
    {
        if(reply_mat[(i+process_id)%N][process_id] == 0) return 0;    //should get `reply` msgs from all the processes in the quorum
    }    

    return 1;
}

//function to reset the matrix `reply_mat` -&gt; this function is invoked when going from state `waiting_for_reply` to `critical_section`
void reset_reply_mat(id_t process_id)
{
    for (i: int[1, (N/2) + 1])
    {
        reply_mat[(i+process_id)%N][process_id] = 0;    //"consume" `reply` messages
    }    
}

//function to release the critical section -&gt; invoked by a process going from the state `critical_section` to `before_sending_req`
void release_cs(id_t process_id)
{
    for (i: int[1, (N/2) + 1])
    {
        release_mat[process_id][(i+process_id)%N] = 1;
    }    

    return ;
}

</declaration>
	<template>
		<name x="5" y="5">Maekawa</name>
		<parameter>const id_t pid</parameter>
		<declaration>// Place local declarations here.

clock x;</declaration>
		<location id="id0" x="0" y="119">
			<name x="-51" y="136">critical_section</name>
		</location>
		<location id="id1" x="357" y="-68">
			<name x="297" y="-102">waiting_for_reply</name>
		</location>
		<location id="id2" x="-374" y="-59">
			<name x="-442" y="-93">before_sending_req</name>
		</location>
		<location id="id3" x="-518" y="-59">
			<name x="-560" y="-42">initial_state</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="391" y="-34">there_are_pending_release_msgs(pid)</label>
			<label kind="assignment" x="433" y="-51">check_release_msgs(pid)</label>
			<nail x="459" y="-85"/>
			<nail x="459" y="-1"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="255" y="-162">there_are_pending_req_msgs(pid)</label>
			<label kind="assignment" x="289" y="-187">check_req_msgs(pid)</label>
			<nail x="314" y="-162"/>
			<nail x="416" y="-162"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-535" y="0">there_are_pending_release_msgs(pid)</label>
			<label kind="assignment" x="-510" y="17">check_release_msgs(pid)</label>
			<nail x="-459" y="17"/>
			<nail x="-374" y="17"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-493" y="-144">there_are_pending_req_msgs(pid)</label>
			<label kind="assignment" x="-468" y="-161">check_req_msgs(pid)</label>
			<nail x="-434" y="-144"/>
			<nail x="-332" y="-144"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-161" y="25">x &gt; K</label>
			<label kind="assignment" x="-178" y="59">release_cs(pid)</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="127" y="0">check_enter_cs(pid)==1</label>
			<label kind="assignment" x="76" y="25">reset_reply_mat(pid), x = 0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-289" y="-85">!(there_are_pending_req_msgs(pid)) &amp;&amp; !(there_are_pending_release_msgs(pid))</label>
			<label kind="assignment" x="-76" y="-59">generate_req(pid)</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="assignment" x="-476" y="-51">init_func(pid)</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
//Process = Template();
// List one or more processes to be composed into a system.
//system Process;
system Maekawa;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Maekawa(0).waiting_for_reply --&gt; Maekawa(0).critical_section
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] forall (i:id_t) forall (j:id_t) Maekawa(i).critical_section &amp;&amp; Maekawa(j).critical_section imply i == j
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
